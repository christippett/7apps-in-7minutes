locals {
  access_token = data.google_client_config.default.access_token
  domain       = var.services.cloud_run_anthos.domain
  triggers = {
    name        = var.services.cloud_run_anthos.name
    description = var.services.cloud_run_anthos.description
    domain      = var.services.cloud_run_anthos.domain
    image       = "${var.image_name}:latest"
    opts = join(" ", [
      "--namespace default",
      "--platform gke",
      "--cluster ${var.cluster_name}",
      "--cluster-location ${var.zone}"
    ])
  }
  api_uri = "https://${var.cluster_endpoint}/apis/domains.cloudrun.com/v1alpha1"
}

resource "null_resource" "cloud_run_anthos" {

  triggers = local.triggers

  provisioner "local-exec" {
    when    = create
    command = <<EOT
    gcloud run deploy ${self.triggers.name} ${self.triggers.opts} \
      --image '${self.triggers.image}';
EOT
  }

  # provisioner "local-exec" {
  #   when    = destroy
  #   command = "gcloud run services delete ${self.triggers.name} ${self.triggers.opts} --quiet"
  # }
}

/* DNS ---------------------------------------------------------------------- */

# https://cloud.google.com/run/docs/mapping-custom-domains
# https://cloud.google.com/run/docs/gke/auto-tls

resource "null_resource" "domain_mapping" {

  triggers = local.triggers

  provisioner "local-exec" {
    when    = create
    command = <<EOT
    gcloud beta run domain-mappings create ${self.triggers.opts} \
      --force-override \
      --service ${self.triggers.name} \
      --domain ${self.triggers.domain} \
      || true;
EOT
  }

  provisioner "local-exec" {
    interpreter = ["/bin/bash"]
    when        = create
    command     = <<EOT
    CACERT="$(echo '${var.cluster_ca_certificate}' | base64 -d)";

    kubectl patch cm config-domainmapping \
      --patch '{"data":{"autoTLS":"Enabled"}}' \
      --server https://${var.cluster_endpoint} \
      --token ${data.google_client_config.default.access_token} \
      --namespace knative-serving \
      --certificate-authority <(echo "$CACERT")
EOT
  }
}

/* DNS ---------------------------------------------------------------------- */

# get ip generated by domain mapping and convert it to a static ip

data "external" "domain_mapping" {
  program = ["bash", "-c", <<EOT
  curl --silent --show-error --fail \
    --insecure \
    --header "Authorization: Bearer ${local.access_token}" \
    --header "X-Goog-User-Project: ${var.project_id}" \
    "${local.api_uri}/namespaces/default/domainmappings/${local.domain}?alt=json" \
  | jq -r -c '.status.resourceRecords[0]' \
EOT
  ]
}

resource "google_compute_address" "static_ip" {
  project = var.project_id
  region  = var.region
  name    = "run-anthos-static-ip"
  address = data.external.domain_mapping.result.rrdata
}

resource "google_dns_record_set" "run_anthos" {
  project      = var.project_id
  name         = "${var.services.cloud_run_anthos.domain}."
  managed_zone = var.cloud_dns_zone
  type         = "A"
  rrdatas      = [google_compute_address.static_ip.address]
  ttl          = 300
}
