steps:
  # ============================================================================ #
  #                                   üìú Setup                                   #
  # ============================================================================ #

  - id: requirements-txt
    name: python:3.8-slim
    entrypoint: bash
    args:
      - "-c"
      - |
        pip install -q poetry && \
        poetry export --without-hashes -f requirements.txt > src/requirements.txt
    dir: "app"
    waitFor: ["-"]

  # ============================================================================ #
  #                            üì¶ BUILD DOCKER IMAGE                            #
  # ============================================================================ #

  - id: docker-pull
    name: gcr.io/cloud-builders/docker
    entrypoint: "bash"
    args:
      [
        "-c",
        "docker --log-level=error pull --quiet gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest || exit 0",
      ]
    waitFor: ["-"]

  - id: docker-build
    name: gcr.io/cloud-builders/docker
    args:
      [
        "--log-level=error",
        "build",
        "--quiet",
        "--build-arg=VERSION=$SHORT_SHA",
        "--build-arg=GRADIENT=${_GRADIENT}",
        "--build-arg=FONT=${_FONT}",
        "--build-arg=ASCII_FONT=${_ASCII_FONT}",
        "--cache-from=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest",
        "--tag=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA",
        "--tag=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest",
        ".",
      ]
    dir: "app"
    waitFor: ["docker-pull", "requirements-txt"]

  - id: docker-push
    name: gcr.io/cloud-builders/docker
    args: ["--log-level=error", "push", "gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA"]
    waitFor: ["docker-build"]

  # ============================================================================ #
  #                              üïπÔ∏è CLOUD FUNCTIONS                              #
  # ============================================================================ #

  - id: cloud-functions
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: gcloud
    args:
      [
        "functions",
        "deploy",
        "${_FUNCTION_NAME}",
        "--trigger-http",
        "--runtime=python38",
        "--entry-point=main",
        "--set-env-vars=VERSION=$SHORT_SHA,GRADIENT=${_GRADIENT},FONT=${_FONT},ASCII_FONT=${_ASCII_FONT}",
        "--source=.",
      ]
    dir: "app/src"
    waitFor: ["requirements-txt"]

  # ============================================================================ #
  #                           üí™ APP ENGINE (STANDARD)                           #
  # ============================================================================ #

  - id: app-engine-standard
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: bash
    args:
      - "-c"
      - |
        cp ../app.standard.yaml app.yaml && gcloud app deploy --version=$SHORT_SHA
    dir: "app/src"
    waitFor: ["requirements-txt"]

  # ============================================================================ #
  #                           ü¶æ APP ENGINE (FLEXIBLE)                           #
  # ============================================================================ #

  - id: app-engine-flexible
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: gcloud
    args:
      [
        "app",
        "deploy",
        "app.flex.yaml",
        "--image-url=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA",
      ]
    dir: "app"
    waitFor: ["docker-push"]

  # ============================================================================ #
  #                                 üèÉ‚Äç‚ôÄÔ∏è CLOUD RUN                                 #
  # ============================================================================ #

  - id: cloud-run-managed
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "${_CLOUD_RUN_NAME}",
        "--image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA",
        "--platform=managed",
      ]
    waitFor: ["docker-push"]

  # ============================================================================ #
  #                             üèÉ‚Äç‚ôÇÔ∏è CLOUD RUN (ANTHOS)                            #
  # ============================================================================ #

  - id: cloud-run-anthos
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "${_CLOUD_RUN_ANTHOS_NAME}",
        "--image=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA",
        "--platform=gke",
        "--namespace=default",
      ]
    waitFor: ["docker-push"]

  # ============================================================================ #
  #                           ‚öôÔ∏è GOOGLE COMPUTE ENGINE                           #
  # ============================================================================ #

  - id: compute-engine
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud compute start-iap-tunnel ${_GCE_INSTANCE} 9000 \
          --local-host-port=localhost:9000 &

        # give tunnel time to connect
        sleep 15;

        curl -X PATCH https://localhost:9000/hooks/update-env \
        --silent --show-error --fail --insecure \
        --header 'Content-Type: application/json' \
        --header "Host: ${_GCE_DOMAIN}" \
        --data '{ "key": "IMAGE_TAG", "value": "$SHORT_SHA" }'
    waitFor: ["docker-push"]

  # ============================================================================ #
  #                       üöÇ GOOGLE KUBERENTES ENGINE (GKE)                      #
  # ============================================================================ #

  - id: k8s-config
    name: hairyhenderson/gomplate
    args: ["-f", "app.k8s.tmpl", "-o", "app.k8s.yaml"]
    env:
      - IMAGE=gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA
      - APP=${_GKE_APP_NAME}
      - DOMAIN=${_GKE_DOMAIN}
    dir: "app"
    waitFor: ["docker-push"]

  - id: kubernetes-engine
    name: gcr.io/cloud-builders/kubectl
    args: ["apply", "-f", "app.k8s.yaml"]
    dir: "app"
    waitFor: ["k8s-config"]

# ============================================================================ #
#                                    Fin üèÅ                                    #
# ============================================================================ #

images:
  - gcr.io/$PROJECT_ID/${_IMAGE_NAME}:latest
  - gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA
options:
  substitution_option: ALLOW_LOOSE
  env:
    - CLOUDSDK_COMPUTE_ZONE=${_ZONE}
    - CLOUDSDK_CONTAINER_CLUSTER=${_GKE_CLUSTER}
    - CLOUDSDK_FUNCTIONS_REGION=us-central1
    - CLOUDSDK_RUN_REGION=us-central1
    - CLOUDSDK_RUN_CLUSTER_LOCATION=${_ZONE}
    - CLOUDSDK_RUN_CLUSTER=${_GKE_CLUSTER}
    - CLOUDSDK_APP_PROMOTE_BY_DEFAULT=1
    - CLOUDSDK_APP_STOP_PREVIOUS_VERSION=1
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1
substitutions:
  _IMAGE_NAME: 7apps-demo
  _REGION: australia-southeast1
  _ZONE: australia-southeast1-a
  _CLOUD_RUN_NAME: run
  _CLOUD_RUN_ANTHOS_NAME: run-anthos
  _FUNCTION_NAME: function
  _GCE_INSTANCE: compute
  _GCE_DOMAIN: compute.7apps.cloud
  _GKE_CLUSTER: gke-cluster
  _GKE_APP_NAME: gke-app
  _GKE_DOMAIN: gke.7apps.cloud
  _GRADIENT: ""
  _FONT: ""
  _ASCII_FONT: ""
tags: ["app"]
timeout: 3600s
