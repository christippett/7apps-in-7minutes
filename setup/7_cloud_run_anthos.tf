/* ========================================================================== */
/*                             Cloud Run (Anthos)                             */
/* ========================================================================== */

locals {
  cloud_run_anthos_cmd_opts = [
    "--namespace default",
    "--platform gke",
    "--cluster ${google_container_cluster.gke.name}",
    "--cluster-location ${var.region}-a"
  ]
  cloud_run_anthos_domain = "${var.service.cloud_run_anthos.subdomain}.${var.domain}"
}

resource "null_resource" "cloud_run_anthos" {

  triggers = {
    name   = var.service.cloud_run_anthos.name
    domain = local.cloud_run_anthos_domain
    opts   = join(" ", local.cloud_run_anthos_cmd_opts)
  }

  provisioner "local-exec" {
    when    = create
    command = <<EOT
      gcloud run deploy ${self.triggers.name} ${self.triggers.opts} \
        --service-account ${kubernetes_service_account.ksa.metadata.0.name} \
        --set-env-vars 'ENVIRONMENT=${var.service.cloud_run_anthos.description}' \
        --image gcr.io/${var.project_id}/${var.container_image_name}:latest;
  EOT
  }

  # https://cloud.google.com/run/docs/mapping-custom-domains
  # https://cloud.google.com/run/docs/gke/auto-tls

  provisioner "local-exec" {
    when    = create
    command = <<EOT
      gcloud beta run domain-mappings create ${self.triggers.opts} \
        --force-override \
        --service ${self.triggers.name} \
        --domain ${self.triggers.domain};

      kubectl patch cm config-domainmapping \
        --namespace knative-serving \
        --patch '{"data":{"autoTLS":"Enabled"}}';
  EOT
  }

  provisioner "local-exec" {
    when    = destroy
    command = "gcloud run services delete ${self.triggers.name} ${self.triggers.opts}"
  }
}

/* DNS ---------------------------------------------------------------------- */

# get static ip generated by domain mapping and create resource for it in Terraform

# gcloud beta run domain-mappings describe \
#   --domain run-anthos.7apps.servian.fun \
#   --namespace default \
#   --platform gke \
#   --cluster gke \
#   --cluster-location us-central1-a \
#   --format="value(status.resourceRecords[0].rrdata)"

resource "google_compute_address" "cloud_run_anthos_static_ip" {
  project = var.project_id
  region  = var.region
  name    = "cloud-run-static-ip"
  address = "35.202.97.17"
}

resource "google_dns_record_set" "cloudrun_anthos" {
  name         = "${local.cloud_run_anthos_domain}."
  managed_zone = google_dns_managed_zone.dns.name
  type         = "A"
  rrdatas      = [google_compute_address.cloud_run_anthos_static_ip.address]
  ttl          = 300
}


/* IAM ---------------------------------------------------------------------- */

data "google_compute_default_service_account" "default" {
  depends_on = [module.project-services]
}

resource "google_project_iam_member" "compute_default" {
  for_each = toset([
    "roles/gkehub.connect",
    "roles/container.hostServiceAgentUser",
    "roles/monitoring.metricWriter",
    "roles/logging.logWriter"
  ])

  project = var.project_id
  role    = each.value
  member  = "serviceAccount:${data.google_compute_default_service_account.default.email}"

  lifecycle {
    ignore_changes = [member]
  }
}

# configure kubernetes service account
# https://cloud.google.com/run/docs/gke/setup#workload-identity

resource "kubernetes_service_account" "ksa" {
  metadata {
    name = "ksa"
    annotations = {
      "iam.gke.io/gcp-service-account" = data.google_compute_default_service_account.default.email
    }
  }
  depends_on = [google_container_cluster.gke]

  lifecycle {
    ignore_changes = [metadata.0.annotations]
  }
}

resource "google_service_account_iam_member" "ksa" {
  service_account_id = data.google_compute_default_service_account.default.name
  role               = "roles/iam.workloadIdentityUser"
  member             = "serviceAccount:${var.project_id}.svc.id.goog[${kubernetes_service_account.ksa.metadata.0.namespace}/${kubernetes_service_account.ksa.metadata.0.name}]"

  depends_on = [google_container_cluster.gke]

  lifecycle {
    ignore_changes = [service_account_id]
  }
}
